// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/neo4j/mcp/internal/database (interfaces: DatabaseService,DriverWithContext)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_database.go -package=mocks github.com/neo4j/mcp/internal/database DatabaseService,DriverWithContext
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	url "net/url"
	reflect "reflect"

	neo4j "github.com/neo4j/neo4j-go-driver/v5/neo4j"
	gomock "go.uber.org/mock/gomock"
)

// MockDatabaseService is a mock of DatabaseService interface.
type MockDatabaseService struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseServiceMockRecorder
	isgomock struct{}
}

// MockDatabaseServiceMockRecorder is the mock recorder for MockDatabaseService.
type MockDatabaseServiceMockRecorder struct {
	mock *MockDatabaseService
}

// NewMockDatabaseService creates a new mock instance.
func NewMockDatabaseService(ctrl *gomock.Controller) *MockDatabaseService {
	mock := &MockDatabaseService{ctrl: ctrl}
	mock.recorder = &MockDatabaseServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseService) EXPECT() *MockDatabaseServiceMockRecorder {
	return m.recorder
}

// ExecuteReadQuery mocks base method.
func (m *MockDatabaseService) ExecuteReadQuery(ctx context.Context, cypher string, params map[string]any, database string) ([]*neo4j.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteReadQuery", ctx, cypher, params, database)
	ret0, _ := ret[0].([]*neo4j.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteReadQuery indicates an expected call of ExecuteReadQuery.
func (mr *MockDatabaseServiceMockRecorder) ExecuteReadQuery(ctx, cypher, params, database any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteReadQuery", reflect.TypeOf((*MockDatabaseService)(nil).ExecuteReadQuery), ctx, cypher, params, database)
}

// ExecuteWriteQuery mocks base method.
func (m *MockDatabaseService) ExecuteWriteQuery(ctx context.Context, cypher string, params map[string]any, database string) ([]*neo4j.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteWriteQuery", ctx, cypher, params, database)
	ret0, _ := ret[0].([]*neo4j.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteWriteQuery indicates an expected call of ExecuteWriteQuery.
func (mr *MockDatabaseServiceMockRecorder) ExecuteWriteQuery(ctx, cypher, params, database any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteWriteQuery", reflect.TypeOf((*MockDatabaseService)(nil).ExecuteWriteQuery), ctx, cypher, params, database)
}

// Neo4jRecordsToJSON mocks base method.
func (m *MockDatabaseService) Neo4jRecordsToJSON(records []*neo4j.Record) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Neo4jRecordsToJSON", records)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Neo4jRecordsToJSON indicates an expected call of Neo4jRecordsToJSON.
func (mr *MockDatabaseServiceMockRecorder) Neo4jRecordsToJSON(records any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Neo4jRecordsToJSON", reflect.TypeOf((*MockDatabaseService)(nil).Neo4jRecordsToJSON), records)
}

// MockDriverWithContext is a mock of DriverWithContext interface.
type MockDriverWithContext struct {
	ctrl     *gomock.Controller
	recorder *MockDriverWithContextMockRecorder
	isgomock struct{}
}

// MockDriverWithContextMockRecorder is the mock recorder for MockDriverWithContext.
type MockDriverWithContextMockRecorder struct {
	mock *MockDriverWithContext
}

// NewMockDriverWithContext creates a new mock instance.
func NewMockDriverWithContext(ctrl *gomock.Controller) *MockDriverWithContext {
	mock := &MockDriverWithContext{ctrl: ctrl}
	mock.recorder = &MockDriverWithContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDriverWithContext) EXPECT() *MockDriverWithContextMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDriverWithContext) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDriverWithContextMockRecorder) Close(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDriverWithContext)(nil).Close), ctx)
}

// ExecuteQueryBookmarkManager mocks base method.
func (m *MockDriverWithContext) ExecuteQueryBookmarkManager() neo4j.BookmarkManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteQueryBookmarkManager")
	ret0, _ := ret[0].(neo4j.BookmarkManager)
	return ret0
}

// ExecuteQueryBookmarkManager indicates an expected call of ExecuteQueryBookmarkManager.
func (mr *MockDriverWithContextMockRecorder) ExecuteQueryBookmarkManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteQueryBookmarkManager", reflect.TypeOf((*MockDriverWithContext)(nil).ExecuteQueryBookmarkManager))
}

// GetServerInfo mocks base method.
func (m *MockDriverWithContext) GetServerInfo(ctx context.Context) (neo4j.ServerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerInfo", ctx)
	ret0, _ := ret[0].(neo4j.ServerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerInfo indicates an expected call of GetServerInfo.
func (mr *MockDriverWithContextMockRecorder) GetServerInfo(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerInfo", reflect.TypeOf((*MockDriverWithContext)(nil).GetServerInfo), ctx)
}

// IsEncrypted mocks base method.
func (m *MockDriverWithContext) IsEncrypted() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEncrypted")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEncrypted indicates an expected call of IsEncrypted.
func (mr *MockDriverWithContextMockRecorder) IsEncrypted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEncrypted", reflect.TypeOf((*MockDriverWithContext)(nil).IsEncrypted))
}

// NewSession mocks base method.
func (m *MockDriverWithContext) NewSession(ctx context.Context, config neo4j.SessionConfig) neo4j.SessionWithContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSession", ctx, config)
	ret0, _ := ret[0].(neo4j.SessionWithContext)
	return ret0
}

// NewSession indicates an expected call of NewSession.
func (mr *MockDriverWithContextMockRecorder) NewSession(ctx, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSession", reflect.TypeOf((*MockDriverWithContext)(nil).NewSession), ctx, config)
}

// Target mocks base method.
func (m *MockDriverWithContext) Target() url.URL {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Target")
	ret0, _ := ret[0].(url.URL)
	return ret0
}

// Target indicates an expected call of Target.
func (mr *MockDriverWithContextMockRecorder) Target() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Target", reflect.TypeOf((*MockDriverWithContext)(nil).Target))
}

// VerifyAuthentication mocks base method.
func (m *MockDriverWithContext) VerifyAuthentication(ctx context.Context, auth *neo4j.AuthToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyAuthentication", ctx, auth)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyAuthentication indicates an expected call of VerifyAuthentication.
func (mr *MockDriverWithContextMockRecorder) VerifyAuthentication(ctx, auth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAuthentication", reflect.TypeOf((*MockDriverWithContext)(nil).VerifyAuthentication), ctx, auth)
}

// VerifyConnectivity mocks base method.
func (m *MockDriverWithContext) VerifyConnectivity(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyConnectivity", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyConnectivity indicates an expected call of VerifyConnectivity.
func (mr *MockDriverWithContextMockRecorder) VerifyConnectivity(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyConnectivity", reflect.TypeOf((*MockDriverWithContext)(nil).VerifyConnectivity), ctx)
}
