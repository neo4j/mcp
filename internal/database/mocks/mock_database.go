// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/neo4j/mcp/internal/database (interfaces: DatabaseService,Driver,Session)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_database.go -package=mocks github.com/neo4j/mcp/internal/database DatabaseService,Driver,Session
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	database "github.com/neo4j/mcp/internal/database"
	neo4j "github.com/neo4j/neo4j-go-driver/v5/neo4j"
	gomock "go.uber.org/mock/gomock"
)

// MockDatabaseService is a mock of DatabaseService interface.
type MockDatabaseService struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseServiceMockRecorder
	isgomock struct{}
}

// MockDatabaseServiceMockRecorder is the mock recorder for MockDatabaseService.
type MockDatabaseServiceMockRecorder struct {
	mock *MockDatabaseService
}

// NewMockDatabaseService creates a new mock instance.
func NewMockDatabaseService(ctrl *gomock.Controller) *MockDatabaseService {
	mock := &MockDatabaseService{ctrl: ctrl}
	mock.recorder = &MockDatabaseServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseService) EXPECT() *MockDatabaseServiceMockRecorder {
	return m.recorder
}

// ExecuteReadQuery mocks base method.
func (m *MockDatabaseService) ExecuteReadQuery(ctx context.Context, cypher string, params map[string]any, arg3 string) ([]*neo4j.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteReadQuery", ctx, cypher, params, arg3)
	ret0, _ := ret[0].([]*neo4j.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteReadQuery indicates an expected call of ExecuteReadQuery.
func (mr *MockDatabaseServiceMockRecorder) ExecuteReadQuery(ctx, cypher, params, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteReadQuery", reflect.TypeOf((*MockDatabaseService)(nil).ExecuteReadQuery), ctx, cypher, params, arg3)
}

// ExecuteWriteQuery mocks base method.
func (m *MockDatabaseService) ExecuteWriteQuery(ctx context.Context, cypher string, params map[string]any, arg3 string) ([]*neo4j.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteWriteQuery", ctx, cypher, params, arg3)
	ret0, _ := ret[0].([]*neo4j.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteWriteQuery indicates an expected call of ExecuteWriteQuery.
func (mr *MockDatabaseServiceMockRecorder) ExecuteWriteQuery(ctx, cypher, params, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteWriteQuery", reflect.TypeOf((*MockDatabaseService)(nil).ExecuteWriteQuery), ctx, cypher, params, arg3)
}

// Neo4jRecordsToJSON mocks base method.
func (m *MockDatabaseService) Neo4jRecordsToJSON(records []*neo4j.Record) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Neo4jRecordsToJSON", records)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Neo4jRecordsToJSON indicates an expected call of Neo4jRecordsToJSON.
func (mr *MockDatabaseServiceMockRecorder) Neo4jRecordsToJSON(records any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Neo4jRecordsToJSON", reflect.TypeOf((*MockDatabaseService)(nil).Neo4jRecordsToJSON), records)
}

// MockDriver is a mock of Driver interface.
type MockDriver struct {
	ctrl     *gomock.Controller
	recorder *MockDriverMockRecorder
	isgomock struct{}
}

// MockDriverMockRecorder is the mock recorder for MockDriver.
type MockDriverMockRecorder struct {
	mock *MockDriver
}

// NewMockDriver creates a new mock instance.
func NewMockDriver(ctrl *gomock.Controller) *MockDriver {
	mock := &MockDriver{ctrl: ctrl}
	mock.recorder = &MockDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDriver) EXPECT() *MockDriverMockRecorder {
	return m.recorder
}

// NewSession mocks base method.
func (m *MockDriver) NewSession(ctx context.Context, arg1 string) (database.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSession", ctx, arg1)
	ret0, _ := ret[0].(database.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewSession indicates an expected call of NewSession.
func (mr *MockDriverMockRecorder) NewSession(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSession", reflect.TypeOf((*MockDriver)(nil).NewSession), ctx, arg1)
}

// MockSession is a mock of Session interface.
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
	isgomock struct{}
}

// MockSessionMockRecorder is the mock recorder for MockSession.
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance.
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockSession) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSessionMockRecorder) Close(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSession)(nil).Close), ctx)
}

// ExecuteRead mocks base method.
func (m *MockSession) ExecuteRead(ctx context.Context, work func(neo4j.ManagedTransaction) (any, error)) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteRead", ctx, work)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteRead indicates an expected call of ExecuteRead.
func (mr *MockSessionMockRecorder) ExecuteRead(ctx, work any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteRead", reflect.TypeOf((*MockSession)(nil).ExecuteRead), ctx, work)
}

// ExecuteWrite mocks base method.
func (m *MockSession) ExecuteWrite(ctx context.Context, work func(neo4j.ManagedTransaction) (any, error)) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteWrite", ctx, work)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteWrite indicates an expected call of ExecuteWrite.
func (mr *MockSessionMockRecorder) ExecuteWrite(ctx, work any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteWrite", reflect.TypeOf((*MockSession)(nil).ExecuteWrite), ctx, work)
}
