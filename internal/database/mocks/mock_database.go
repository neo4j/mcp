// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/neo4j/mcp/internal/database (interfaces: Service)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_database.go -package=mocks github.com/neo4j/mcp/internal/database Service
//

// package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	neo4j "github.com/neo4j/neo4j-go-driver/v5/neo4j"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// ExecuteReadQuery mocks base method.
func (m *MockService) ExecuteReadQuery(ctx context.Context, cypher string, params map[string]any) ([]*neo4j.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteReadQuery", ctx, cypher, params)
	ret0, _ := ret[0].([]*neo4j.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteReadQuery indicates an expected call of ExecuteReadQuery.
func (mr *MockServiceMockRecorder) ExecuteReadQuery(ctx, cypher, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteReadQuery", reflect.TypeOf((*MockService)(nil).ExecuteReadQuery), ctx, cypher, params)
}

// ExecuteWriteQuery mocks base method.
func (m *MockService) ExecuteWriteQuery(ctx context.Context, cypher string, params map[string]any) ([]*neo4j.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteWriteQuery", ctx, cypher, params)
	ret0, _ := ret[0].([]*neo4j.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteWriteQuery indicates an expected call of ExecuteWriteQuery.
func (mr *MockServiceMockRecorder) ExecuteWriteQuery(ctx, cypher, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteWriteQuery", reflect.TypeOf((*MockService)(nil).ExecuteWriteQuery), ctx, cypher, params)
}

// GetQueryType mocks base method.
func (m *MockService) GetQueryType(ctx context.Context, cypher string, params map[string]any) (neo4j.StatementType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueryType", ctx, cypher, params)
	ret0, _ := ret[0].(neo4j.StatementType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueryType indicates an expected call of GetQueryType.
func (mr *MockServiceMockRecorder) GetQueryType(ctx, cypher, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueryType", reflect.TypeOf((*MockService)(nil).GetQueryType), ctx, cypher, params)
}

// Neo4jRecordsToJSON mocks base method.
func (m *MockService) Neo4jRecordsToJSON(records []*neo4j.Record) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Neo4jRecordsToJSON", records)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Neo4jRecordsToJSON indicates an expected call of Neo4jRecordsToJSON.
func (mr *MockServiceMockRecorder) Neo4jRecordsToJSON(records any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Neo4jRecordsToJSON", reflect.TypeOf((*MockService)(nil).Neo4jRecordsToJSON), records)
}
