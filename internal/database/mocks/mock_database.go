// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=mocks/mock_database.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	neo4j "github.com/neo4j/neo4j-go-driver/v5/neo4j"
	gomock "go.uber.org/mock/gomock"
)

// MockSessionFactory is a mock of SessionFactory interface.
type MockSessionFactory struct {
	ctrl     *gomock.Controller
	recorder *MockSessionFactoryMockRecorder
	isgomock struct{}
}

// MockSessionFactoryMockRecorder is the mock recorder for MockSessionFactory.
type MockSessionFactoryMockRecorder struct {
	mock *MockSessionFactory
}

// NewMockSessionFactory creates a new mock instance.
func NewMockSessionFactory(ctrl *gomock.Controller) *MockSessionFactory {
	mock := &MockSessionFactory{ctrl: ctrl}
	mock.recorder = &MockSessionFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionFactory) EXPECT() *MockSessionFactoryMockRecorder {
	return m.recorder
}

// NewSession mocks base method.
func (m *MockSessionFactory) NewSession(ctx context.Context, database string) neo4j.SessionWithContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSession", ctx, database)
	ret0, _ := ret[0].(neo4j.SessionWithContext)
	return ret0
}

// NewSession indicates an expected call of NewSession.
func (mr *MockSessionFactoryMockRecorder) NewSession(ctx, database any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSession", reflect.TypeOf((*MockSessionFactory)(nil).NewSession), ctx, database)
}

// MockQueryExecutor is a mock of QueryExecutor interface.
type MockQueryExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockQueryExecutorMockRecorder
	isgomock struct{}
}

// MockQueryExecutorMockRecorder is the mock recorder for MockQueryExecutor.
type MockQueryExecutorMockRecorder struct {
	mock *MockQueryExecutor
}

// NewMockQueryExecutor creates a new mock instance.
func NewMockQueryExecutor(ctrl *gomock.Controller) *MockQueryExecutor {
	mock := &MockQueryExecutor{ctrl: ctrl}
	mock.recorder = &MockQueryExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryExecutor) EXPECT() *MockQueryExecutorMockRecorder {
	return m.recorder
}

// ExecuteReadQuery mocks base method.
func (m *MockQueryExecutor) ExecuteReadQuery(ctx context.Context, cypher string, params map[string]any, database string) ([]*neo4j.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteReadQuery", ctx, cypher, params, database)
	ret0, _ := ret[0].([]*neo4j.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteReadQuery indicates an expected call of ExecuteReadQuery.
func (mr *MockQueryExecutorMockRecorder) ExecuteReadQuery(ctx, cypher, params, database any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteReadQuery", reflect.TypeOf((*MockQueryExecutor)(nil).ExecuteReadQuery), ctx, cypher, params, database)
}

// ExecuteWriteQuery mocks base method.
func (m *MockQueryExecutor) ExecuteWriteQuery(ctx context.Context, cypher string, params map[string]any, database string) ([]*neo4j.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteWriteQuery", ctx, cypher, params, database)
	ret0, _ := ret[0].([]*neo4j.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteWriteQuery indicates an expected call of ExecuteWriteQuery.
func (mr *MockQueryExecutorMockRecorder) ExecuteWriteQuery(ctx, cypher, params, database any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteWriteQuery", reflect.TypeOf((*MockQueryExecutor)(nil).ExecuteWriteQuery), ctx, cypher, params, database)
}

// MockRecordFormatter is a mock of RecordFormatter interface.
type MockRecordFormatter struct {
	ctrl     *gomock.Controller
	recorder *MockRecordFormatterMockRecorder
	isgomock struct{}
}

// MockRecordFormatterMockRecorder is the mock recorder for MockRecordFormatter.
type MockRecordFormatterMockRecorder struct {
	mock *MockRecordFormatter
}

// NewMockRecordFormatter creates a new mock instance.
func NewMockRecordFormatter(ctrl *gomock.Controller) *MockRecordFormatter {
	mock := &MockRecordFormatter{ctrl: ctrl}
	mock.recorder = &MockRecordFormatterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecordFormatter) EXPECT() *MockRecordFormatterMockRecorder {
	return m.recorder
}

// Neo4jRecordsToJSON mocks base method.
func (m *MockRecordFormatter) Neo4jRecordsToJSON(records []*neo4j.Record) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Neo4jRecordsToJSON", records)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Neo4jRecordsToJSON indicates an expected call of Neo4jRecordsToJSON.
func (mr *MockRecordFormatterMockRecorder) Neo4jRecordsToJSON(records any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Neo4jRecordsToJSON", reflect.TypeOf((*MockRecordFormatter)(nil).Neo4jRecordsToJSON), records)
}

// MockDatabaseService is a mock of DatabaseService interface.
type MockDatabaseService struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseServiceMockRecorder
	isgomock struct{}
}

// MockDatabaseServiceMockRecorder is the mock recorder for MockDatabaseService.
type MockDatabaseServiceMockRecorder struct {
	mock *MockDatabaseService
}

// NewMockDatabaseService creates a new mock instance.
func NewMockDatabaseService(ctrl *gomock.Controller) *MockDatabaseService {
	mock := &MockDatabaseService{ctrl: ctrl}
	mock.recorder = &MockDatabaseServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseService) EXPECT() *MockDatabaseServiceMockRecorder {
	return m.recorder
}

// ExecuteReadQuery mocks base method.
func (m *MockDatabaseService) ExecuteReadQuery(ctx context.Context, cypher string, params map[string]any, database string) ([]*neo4j.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteReadQuery", ctx, cypher, params, database)
	ret0, _ := ret[0].([]*neo4j.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteReadQuery indicates an expected call of ExecuteReadQuery.
func (mr *MockDatabaseServiceMockRecorder) ExecuteReadQuery(ctx, cypher, params, database any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteReadQuery", reflect.TypeOf((*MockDatabaseService)(nil).ExecuteReadQuery), ctx, cypher, params, database)
}

// ExecuteWriteQuery mocks base method.
func (m *MockDatabaseService) ExecuteWriteQuery(ctx context.Context, cypher string, params map[string]any, database string) ([]*neo4j.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteWriteQuery", ctx, cypher, params, database)
	ret0, _ := ret[0].([]*neo4j.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteWriteQuery indicates an expected call of ExecuteWriteQuery.
func (mr *MockDatabaseServiceMockRecorder) ExecuteWriteQuery(ctx, cypher, params, database any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteWriteQuery", reflect.TypeOf((*MockDatabaseService)(nil).ExecuteWriteQuery), ctx, cypher, params, database)
}

// Neo4jRecordsToJSON mocks base method.
func (m *MockDatabaseService) Neo4jRecordsToJSON(records []*neo4j.Record) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Neo4jRecordsToJSON", records)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Neo4jRecordsToJSON indicates an expected call of Neo4jRecordsToJSON.
func (mr *MockDatabaseServiceMockRecorder) Neo4jRecordsToJSON(records any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Neo4jRecordsToJSON", reflect.TypeOf((*MockDatabaseService)(nil).Neo4jRecordsToJSON), records)
}
